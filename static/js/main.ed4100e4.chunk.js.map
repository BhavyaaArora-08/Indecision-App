{"version":3,"sources":["components/Header.js","components/Action.js","components/Option.js","components/Options.js","components/AddOption.js","components/OptionModal.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","title","subtitle","defaultProps","Action","onClick","handlePick","disabled","hasOptions","Option","contentEditable","count","optionText","e","handleDeleteOption","Options","handleDeleteOptions","options","length","map","option","index","key","AddOption","state","error","undefined","handleAddOption","bind","preventDefault","document","getElementById","value","this","setState","alert","onSubmit","autoComplete","id","name","type","placeholder","Component","OptionModal","ariaHideApp","onRequestClose","handlePickClose","isOpen","selectedOption","contentLabel","closeTimeoutMS","App","json","localStorage","getItem","JSON","parse","indexOf","randomNo","Math","floor","random","optionToBeDeleted","array","filter","prevProps","prevState","stringify","setItem","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.ed4100e4.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nconst Header = (props) => {\r\n  return (\r\n    <div className=\"header\">\r\n      <div className=\"container\">\r\n        <h1 className=\"header__title\">{props.title}</h1>\r\n        {props.subtitle && (\r\n          <h2 className=\"header__subtitle\">{props.subtitle}</h2>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nHeader.defaultProps = {\r\n  title: \"Indecision\",\r\n};\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\n\r\nconst Action = (props) => {\r\n  return (\r\n    <div>\r\n      <button\r\n        className=\"big-button\"\r\n        onClick={props.handlePick}\r\n        disabled={!props.hasOptions}\r\n      >\r\n        What should I do?\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Action;\r\n","import React, { Component } from \"react\";\r\n\r\nconst Option = (props) => {\r\n  return (\r\n    <div className=\"option\">\r\n      <p contentEditable={true} className=\"option__text\">\r\n        {props.count}. {props.optionText}\r\n      </p>\r\n      <button\r\n        className=\"button button--link\"\r\n        onClick={(e) => {\r\n          props.handleDeleteOption(props.optionText);\r\n        }}\r\n      >\r\n        remove\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Option;\r\n","import React, { Component } from \"react\";\r\nimport Option from \"./Option\";\r\n\r\nconst Options = (props) => {\r\n  return (\r\n    <div>\r\n      <div className=\"widget-header\">\r\n        <h3 className=\"widget-header__title\">Your Options</h3>\r\n        <button\r\n          className=\"button button--link\"\r\n          onClick={props.handleDeleteOptions}\r\n        >\r\n          Remove All\r\n        </button>\r\n      </div>\r\n      {props.options.length === 0 && (\r\n        <p className=\"widget__element\">Please add an option to get started!</p>\r\n      )}\r\n      {props.options.map((option, index) => (\r\n        <Option\r\n          key={option}\r\n          optionText={option}\r\n          count={index + 1}\r\n          handleDeleteOption={props.handleDeleteOption}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Options;\r\n","import React, { Component } from \"react\";\r\n\r\nclass AddOption extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      error: undefined,\r\n    };\r\n    this.handleAddOption = this.handleAddOption.bind(this);\r\n  }\r\n\r\n  handleAddOption(e) {\r\n    e.preventDefault();\r\n    const option = document.getElementById(\"optionInput\");\r\n    if (option.value) {\r\n      var error = this.props.handleAddOption(option.value);\r\n      if (error != undefined) {\r\n        this.setState({\r\n          error: error,\r\n        });\r\n      }\r\n      option.value = \"\";\r\n    } else {\r\n      alert(\"Input string can't be blank\");\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state.error && (\r\n          <p className=\"add-option-error\">{this.state.error}</p>\r\n        )}\r\n        <form className=\"add-option\" onSubmit={this.handleAddOption}>\r\n          <input\r\n            autoComplete=\"off\"\r\n            className=\"add-option__input\"\r\n            id=\"optionInput\"\r\n            name=\"option\"\r\n            type=\"text\"\r\n            placeholder=\"enter option here..\"\r\n          />\r\n          <button className=\"button\" type=\"submit\">\r\n            Add Option\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddOption;\r\n","import React from \"react\";\r\nimport Modal from \"react-modal\";\r\n\r\nconst OptionModal = (props) => (\r\n  <Modal\r\n    ariaHideApp={false}\r\n    onRequestClose={props.handlePickClose}\r\n    isOpen={!!props.selectedOption}\r\n    contentLabel=\"Selected Option\"\r\n    closeTimeoutMS={200}\r\n    className=\"modal\"\r\n  >\r\n    <h3 className=\"modal__title\">Selected Option</h3>\r\n    {props.selectedOption && (\r\n      <p className=\"modal__body\">{props.selectedOption}</p>\r\n    )}\r\n    <button className=\"button\" onClick={props.handlePickClose}>\r\n      Okay\r\n    </button>\r\n  </Modal>\r\n);\r\n\r\nexport default OptionModal;\r\n","import React, { Component } from \"react\";\nimport Header from \"./components/Header\";\nimport Action from \"./components/Action\";\nimport Options from \"./components/Options\";\nimport AddOption from \"./components/AddOption\";\nimport OptionModal from \"./components/OptionModal\";\nimport \"normalize.css/normalize.css\";\nimport \"./styles/styles.scss\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.handleDeleteOptions = this.handleDeleteOptions.bind(this);\n    this.handlePick = this.handlePick.bind(this);\n    this.handleAddOption = this.handleAddOption.bind(this);\n    this.handleDeleteOption = this.handleDeleteOption.bind(this);\n    this.handlePickClose = this.handlePickClose.bind(this);\n\n    this.state = {\n      options: props.options,\n      selectedOption: undefined,\n    };\n  }\n\n  componentDidMount() {\n    try {\n      const json = localStorage.getItem(\"options\");\n      const options = JSON.parse(json);\n\n      if (options) {\n        this.setState({\n          options: options,\n        });\n      }\n    } catch (error) {}\n  }\n\n  handleAddOption(option) {\n    if (this.state.options.indexOf(option) == -1) {\n      this.setState({\n        options: [...this.state.options, option],\n      });\n      return \"\";\n    } else {\n      return \"This option already exists\";\n    }\n  }\n\n  handlePick() {\n    const randomNo = Math.floor(Math.random() * this.state.options.length);\n    const option = this.state.options[randomNo];\n    this.setState({\n      selectedOption: option,\n    });\n  }\n\n  handlePickClose() {\n    this.setState({\n      selectedOption: undefined,\n    });\n  }\n\n  handleDeleteOptions() {\n    this.setState({ options: [] });\n  }\n\n  handleDeleteOption(optionToBeDeleted) {\n    const array = this.state.options.filter((option) => {\n      return option != optionToBeDeleted;\n    });\n    this.setState({\n      options: array,\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.options.length !== this.state.options.length) {\n      const json = JSON.stringify(this.state.options);\n      localStorage.setItem(\"options\", json);\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Header subtitle=\"Put your life in the hands of a computer.\" />\n        <div className=\"container\">\n          <Action\n            handlePick={this.handlePick}\n            hasOptions={this.state.options.length > 0}\n          />\n          <div className=\"widget\">\n            <Options\n              handleDeleteOption={this.handleDeleteOption}\n              options={this.state.options}\n              handleDeleteOptions={this.handleDeleteOptions}\n            />\n            <AddOption handleAddOption={this.handleAddOption} />\n          </div>\n          <OptionModal\n            handlePickClose={this.handlePickClose}\n            selectedOption={this.state.selectedOption}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nApp.defaultProps = {\n  options: [\"One\", \"Two\", \"Three\"],\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}